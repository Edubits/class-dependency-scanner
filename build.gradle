plugins {
	id "com.github.hierynomus.license" version "0.12.1"
}
apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'build-dashboard'

targetCompatibility = 1.7
sourceCompatibility = 1.7

group = 'com.github.janbeernink'

version = '1.0-alpha-1'

defaultTasks 'build'

if(!gradle.startParameter.taskNames.contains('release')) {
    version += '-SNAPSHOT'
}

task release {}
release.dependsOn build, distZip, distTar

repositories {
	mavenCentral()
    mavenLocal()
}

sourceSets {
	demoApp
}

dependencies {
	compile 'org.ow2.asm:asm:5.0.2'
	testCompile 'junit:junit:4.11', 'org.hamcrest:hamcrest-library:1.3'
	demoAppCompile sourceSets.main.runtimeClasspath
}

license {
	mapping {
		java = 'SLASHSTAR_STYLE'
	}
}

if (hasProperty('demoDependencies')) {
    // Register runtime dependencies for use with the demo app
    dependencies {
        demoDependencies.split(',').each{d -> demoAppRuntime d }
    }
}

jacoco {
	toolVersion = '0.7.0.201403182114'
}

wrapper {
	gradleVersion = '2.12'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		mavenLibrary(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom.withXml { xmlProvider ->
				Node licensesNode = xmlProvider.asNode().appendNode('licenses')
				Node licenseNode = licensesNode.appendNode('license')
				licenseNode.appendNode('name', 'The Apache Software License, Version 2.0');
				licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0')
			}
		}
	}
}

distributions {
	main {
		contents.with {
			from(sourcesJar)
			into('docs/javadoc') {
				from(javadoc)
			}
		}
	}
}

task runDemoApp(type: JavaExec) {
	main = 'com.github.janbeernink.classdependencyscanner.ClassDependencyScannerApp'
	classpath = sourceSets.demoApp.runtimeClasspath
	standardInput = System.in
}
